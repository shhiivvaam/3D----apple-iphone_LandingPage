{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Vector3, Vector4, Matrix4, Matrix3 } from 'three';\nconst _positionVector = /*@__PURE__*/new Vector3();\nconst _normalVector = /*@__PURE__*/new Vector3();\nconst _tangentVector = /*@__PURE__*/new Vector3();\nconst _tangentVector4 = /*@__PURE__*/new Vector4();\nconst _morphVector = /*@__PURE__*/new Vector3();\nconst _temp = /*@__PURE__*/new Vector3();\nconst _skinIndex = /*@__PURE__*/new Vector4();\nconst _skinWeight = /*@__PURE__*/new Vector4();\nconst _matrix = /*@__PURE__*/new Matrix4();\nconst _boneMatrix = /*@__PURE__*/new Matrix4();\n\n// Confirms that the two provided attributes are compatible\nfunction validateAttributes(attr1, attr2) {\n  if (!attr1 && !attr2) {\n    return;\n  }\n  const sameCount = attr1.count === attr2.count;\n  const sameNormalized = attr1.normalized === attr2.normalized;\n  const sameType = attr1.array.constructor === attr2.array.constructor;\n  const sameItemSize = attr1.itemSize === attr2.itemSize;\n  if (!sameCount || !sameNormalized || !sameType || !sameItemSize) {\n    throw new Error();\n  }\n}\n\n// Clones the given attribute with a new compatible buffer attribute but no data\nfunction createAttributeClone(attr) {\n  let countOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const cons = attr.array.constructor;\n  const normalized = attr.normalized;\n  const itemSize = attr.itemSize;\n  const count = countOverride === null ? attr.count : countOverride;\n  return new BufferAttribute(new cons(itemSize * count), itemSize, normalized);\n}\n\n// target offset is the number of elements in the target buffer stride to skip before copying the\n// attributes contents in to.\nfunction copyAttributeContents(attr, target) {\n  let targetOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (attr.isInterleavedBufferAttribute) {\n    const itemSize = attr.itemSize;\n    for (let i = 0, l = attr.count; i < l; i++) {\n      const io = i + targetOffset;\n      target.setX(io, attr.getX(i));\n      if (itemSize >= 2) target.setY(io, attr.getY(i));\n      if (itemSize >= 3) target.setZ(io, attr.getZ(i));\n      if (itemSize >= 4) target.setW(io, attr.getW(i));\n    }\n  } else {\n    const array = target.array;\n    const cons = array.constructor;\n    const byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\n    const temp = new cons(array.buffer, byteOffset, attr.array.length);\n    temp.set(attr.array);\n  }\n}\n\n// Adds the \"matrix\" multiplied by \"scale\" to \"target\"\nfunction addScaledMatrix(target, matrix, scale) {\n  const targetArray = target.elements;\n  const matrixArray = matrix.elements;\n  for (let i = 0, l = matrixArray.length; i < l; i++) {\n    targetArray[i] += matrixArray[i] * scale;\n  }\n}\n\n// A version of \"SkinnedMesh.boneTransform\" for normals\nfunction boneNormalTransform(mesh, index, target) {\n  const skeleton = mesh.skeleton;\n  const geometry = mesh.geometry;\n  const bones = skeleton.bones;\n  const boneInverses = skeleton.boneInverses;\n  _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n  _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n  _matrix.elements.fill(0);\n  for (let i = 0; i < 4; i++) {\n    const weight = _skinWeight.getComponent(i);\n    if (weight !== 0) {\n      const boneIndex = _skinIndex.getComponent(i);\n      _boneMatrix.multiplyMatrices(bones[boneIndex].matrixWorld, boneInverses[boneIndex]);\n      addScaledMatrix(_matrix, _boneMatrix, weight);\n    }\n  }\n  _matrix.multiply(mesh.bindMatrix).premultiply(mesh.bindMatrixInverse);\n  target.transformDirection(_matrix);\n  return target;\n}\n\n// Applies the morph target data to the target vector\nfunction applyMorphTarget(morphData, morphInfluences, morphTargetsRelative, i, target) {\n  _morphVector.set(0, 0, 0);\n  for (let j = 0, jl = morphData.length; j < jl; j++) {\n    const influence = morphInfluences[j];\n    const morphAttribute = morphData[j];\n    if (influence === 0) continue;\n    _temp.fromBufferAttribute(morphAttribute, i);\n    if (morphTargetsRelative) {\n      _morphVector.addScaledVector(_temp, influence);\n    } else {\n      _morphVector.addScaledVector(_temp.sub(target), influence);\n    }\n  }\n  target.add(_morphVector);\n}\n\n// Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in plac\nfunction mergeBufferGeometries(geometries) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    useGroups: false,\n    updateIndex: false\n  };\n  let targetGeometry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new BufferGeometry();\n  const isIndexed = geometries[0].index !== null;\n  const {\n    useGroups,\n    updateIndex\n  } = options;\n  const attributesUsed = new Set(Object.keys(geometries[0].attributes));\n  const attributes = {};\n  let offset = 0;\n  for (let i = 0; i < geometries.length; ++i) {\n    const geometry = geometries[i];\n    let attributesCount = 0;\n\n    // ensure that all geometries are indexed, or none\n    if (isIndexed !== (geometry.index !== null)) {\n      throw new Error('StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');\n    }\n\n    // gather attributes, exit early if they're different\n    for (const name in geometry.attributes) {\n      if (!attributesUsed.has(name)) {\n        throw new Error('StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.');\n      }\n      if (attributes[name] === undefined) {\n        attributes[name] = [];\n      }\n      attributes[name].push(geometry.attributes[name]);\n      attributesCount++;\n    }\n\n    // ensure geometries have the same number of attributes\n    if (attributesCount !== attributesUsed.size) {\n      throw new Error('StaticGeometryGenerator: Make sure all geometries have the same number of attributes.');\n    }\n    if (useGroups) {\n      let count;\n      if (isIndexed) {\n        count = geometry.index.count;\n      } else if (geometry.attributes.position !== undefined) {\n        count = geometry.attributes.position.count;\n      } else {\n        throw new Error('StaticGeometryGenerator: The geometry must have either an index or a position attribute');\n      }\n      targetGeometry.addGroup(offset, count, i);\n      offset += count;\n    }\n  }\n\n  // merge indices\n  if (isIndexed) {\n    let forceUpateIndex = false;\n    if (!targetGeometry.index) {\n      let indexCount = 0;\n      for (let i = 0; i < geometries.length; ++i) {\n        indexCount += geometries[i].index.count;\n      }\n      targetGeometry.setIndex(new BufferAttribute(new Uint32Array(indexCount), 1, false));\n      forceUpateIndex = true;\n    }\n    if (updateIndex || forceUpateIndex) {\n      const targetIndex = targetGeometry.index;\n      let targetOffset = 0;\n      let indexOffset = 0;\n      for (let i = 0; i < geometries.length; ++i) {\n        const geometry = geometries[i];\n        const index = geometry.index;\n        for (let j = 0; j < index.count; ++j) {\n          targetIndex.setX(targetOffset, index.getX(j) + indexOffset);\n          targetOffset++;\n        }\n        indexOffset += geometry.attributes.position.count;\n      }\n    }\n  }\n\n  // merge attributes\n  for (const name in attributes) {\n    const attrList = attributes[name];\n    if (!(name in targetGeometry.attributes)) {\n      let count = 0;\n      for (const key in attrList) {\n        count += attrList[key].count;\n      }\n      targetGeometry.setAttribute(name, createAttributeClone(attributes[name][0], count));\n    }\n    const targetAttribute = targetGeometry.attributes[name];\n    let offset = 0;\n    for (const key in attrList) {\n      const attr = attrList[key];\n      copyAttributeContents(attr, targetAttribute, offset);\n      offset += attr.count;\n    }\n  }\n  return targetGeometry;\n}\nexport class StaticGeometryGenerator {\n  constructor(meshes) {\n    if (!Array.isArray(meshes)) {\n      meshes = [meshes];\n    }\n    const finalMeshes = [];\n    meshes.forEach(object => {\n      object.traverse(c => {\n        if (c.isMesh) {\n          finalMeshes.push(c);\n        }\n      });\n    });\n    this.meshes = finalMeshes;\n    this.useGroups = true;\n    this.applyWorldTransforms = true;\n    this.attributes = ['position', 'normal', 'tangent', 'uv', 'uv2'];\n    this._intermediateGeometry = new Array(finalMeshes.length).fill().map(() => new BufferGeometry());\n  }\n  getMaterials() {\n    const materials = [];\n    this.meshes.forEach(mesh => {\n      if (Array.isArray(mesh.material)) {\n        materials.push(...mesh.material);\n      } else {\n        materials.push(mesh.material);\n      }\n    });\n    return materials;\n  }\n  generate() {\n    let targetGeometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n    const {\n      meshes,\n      useGroups,\n      _intermediateGeometry\n    } = this;\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n      const geom = _intermediateGeometry[i];\n      this._convertToStaticGeometry(mesh, geom);\n    }\n    mergeBufferGeometries(_intermediateGeometry, {\n      useGroups\n    }, targetGeometry);\n    for (const key in targetGeometry.attributes) {\n      targetGeometry.attributes[key].needsUpdate = true;\n    }\n    return targetGeometry;\n  }\n  _convertToStaticGeometry(mesh) {\n    let targetGeometry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new BufferGeometry();\n    const geometry = mesh.geometry;\n    const applyWorldTransforms = this.applyWorldTransforms;\n    const includeNormal = this.attributes.includes('normal');\n    const includeTangent = this.attributes.includes('tangent');\n    const attributes = geometry.attributes;\n    const targetAttributes = targetGeometry.attributes;\n\n    // initialize the attributes if they don't exist\n    if (!targetGeometry.index) {\n      targetGeometry.index = geometry.index;\n    }\n    if (!targetAttributes.position) {\n      targetGeometry.setAttribute('position', createAttributeClone(attributes.position));\n    }\n    if (includeNormal && !targetAttributes.normal && attributes.normal) {\n      targetGeometry.setAttribute('normal', createAttributeClone(attributes.normal));\n    }\n    if (includeTangent && !targetAttributes.tangent && attributes.tangent) {\n      targetGeometry.setAttribute('tangent', createAttributeClone(attributes.tangent));\n    }\n\n    // ensure the attributes are consistent\n    validateAttributes(geometry.index, targetGeometry.index);\n    validateAttributes(attributes.position, targetAttributes.position);\n    if (includeNormal) {\n      validateAttributes(attributes.normal, targetAttributes.normal);\n    }\n    if (includeTangent) {\n      validateAttributes(attributes.tangent, targetAttributes.tangent);\n    }\n\n    // generate transformed vertex attribute data\n    const position = attributes.position;\n    const normal = includeNormal ? attributes.normal : null;\n    const tangent = includeTangent ? attributes.tangent : null;\n    const morphPosition = geometry.morphAttributes.position;\n    const morphNormal = geometry.morphAttributes.normal;\n    const morphTangent = geometry.morphAttributes.tangent;\n    const morphTargetsRelative = geometry.morphTargetsRelative;\n    const morphInfluences = mesh.morphTargetInfluences;\n    const normalMatrix = new Matrix3();\n    normalMatrix.getNormalMatrix(mesh.matrixWorld);\n    for (let i = 0, l = attributes.position.count; i < l; i++) {\n      _positionVector.fromBufferAttribute(position, i);\n      if (normal) {\n        _normalVector.fromBufferAttribute(normal, i);\n      }\n      if (tangent) {\n        _tangentVector4.fromBufferAttribute(tangent, i);\n        _tangentVector.fromBufferAttribute(tangent, i);\n      }\n\n      // apply morph target transform\n      if (morphInfluences) {\n        if (morphPosition) {\n          applyMorphTarget(morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector);\n        }\n        if (morphNormal) {\n          applyMorphTarget(morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector);\n        }\n        if (morphTangent) {\n          applyMorphTarget(morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector);\n        }\n      }\n\n      // apply bone transform\n      if (mesh.isSkinnedMesh) {\n        mesh.boneTransform(i, _positionVector);\n        if (normal) {\n          boneNormalTransform(mesh, i, _normalVector);\n        }\n        if (tangent) {\n          boneNormalTransform(mesh, i, _tangentVector);\n        }\n      }\n\n      // update the vectors of the attributes\n      if (applyWorldTransforms) {\n        _positionVector.applyMatrix4(mesh.matrixWorld);\n      }\n      targetAttributes.position.setXYZ(i, _positionVector.x, _positionVector.y, _positionVector.z);\n      if (normal) {\n        if (applyWorldTransforms) {\n          _normalVector.applyNormalMatrix(normalMatrix);\n        }\n        targetAttributes.normal.setXYZ(i, _normalVector.x, _normalVector.y, _normalVector.z);\n      }\n      if (tangent) {\n        if (applyWorldTransforms) {\n          _tangentVector.transformDirection(mesh.matrixWorld);\n        }\n        targetAttributes.tangent.setXYZW(i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w);\n      }\n    }\n\n    // copy other attributes over\n    for (const i in this.attributes) {\n      const key = this.attributes[i];\n      if (key === 'position' || key === 'tangent' || key === 'normal' || !(key in attributes)) {\n        continue;\n      }\n      if (!targetAttributes[key]) {\n        targetGeometry.setAttribute(key, createAttributeClone(attributes[key]));\n      }\n      validateAttributes(attributes[key], targetAttributes[key]);\n      copyAttributeContents(attributes[key], targetAttributes[key]);\n    }\n    return targetGeometry;\n  }\n}","map":{"version":3,"names":["BufferAttribute","BufferGeometry","Vector3","Vector4","Matrix4","Matrix3","_positionVector","_normalVector","_tangentVector","_tangentVector4","_morphVector","_temp","_skinIndex","_skinWeight","_matrix","_boneMatrix","validateAttributes","attr1","attr2","sameCount","count","sameNormalized","normalized","sameType","array","constructor","sameItemSize","itemSize","Error","createAttributeClone","attr","countOverride","arguments","length","undefined","cons","copyAttributeContents","target","targetOffset","isInterleavedBufferAttribute","i","l","io","setX","getX","setY","getY","setZ","getZ","setW","getW","byteOffset","BYTES_PER_ELEMENT","temp","buffer","set","addScaledMatrix","matrix","scale","targetArray","elements","matrixArray","boneNormalTransform","mesh","index","skeleton","geometry","bones","boneInverses","fromBufferAttribute","attributes","skinIndex","skinWeight","fill","weight","getComponent","boneIndex","multiplyMatrices","matrixWorld","multiply","bindMatrix","premultiply","bindMatrixInverse","transformDirection","applyMorphTarget","morphData","morphInfluences","morphTargetsRelative","j","jl","influence","morphAttribute","addScaledVector","sub","add","mergeBufferGeometries","geometries","options","useGroups","updateIndex","targetGeometry","isIndexed","attributesUsed","Set","Object","keys","offset","attributesCount","name","has","push","size","position","addGroup","forceUpateIndex","indexCount","setIndex","Uint32Array","targetIndex","indexOffset","attrList","key","setAttribute","targetAttribute","StaticGeometryGenerator","meshes","Array","isArray","finalMeshes","forEach","object","traverse","c","isMesh","applyWorldTransforms","_intermediateGeometry","map","getMaterials","materials","material","generate","geom","_convertToStaticGeometry","needsUpdate","includeNormal","includes","includeTangent","targetAttributes","normal","tangent","morphPosition","morphAttributes","morphNormal","morphTangent","morphTargetInfluences","normalMatrix","getNormalMatrix","isSkinnedMesh","boneTransform","applyMatrix4","setXYZ","x","y","z","applyNormalMatrix","setXYZW","w"],"sources":["C:/Users/lifes/OneDrive/Desktop/Projects/3D Apple Landing Page/Apple-iphone-3d-landing-page-starter-Code/node_modules/three-mesh-bvh/src/utils/StaticGeometryGenerator.js"],"sourcesContent":["import { BufferAttribute, BufferGeometry, Vector3, Vector4, Matrix4, Matrix3 } from 'three';\r\n\r\nconst _positionVector = /*@__PURE__*/ new Vector3();\r\nconst _normalVector = /*@__PURE__*/ new Vector3();\r\nconst _tangentVector = /*@__PURE__*/ new Vector3();\r\nconst _tangentVector4 = /*@__PURE__*/ new Vector4();\r\n\r\nconst _morphVector = /*@__PURE__*/ new Vector3();\r\nconst _temp = /*@__PURE__*/ new Vector3();\r\n\r\nconst _skinIndex = /*@__PURE__*/ new Vector4();\r\nconst _skinWeight = /*@__PURE__*/ new Vector4();\r\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n// Confirms that the two provided attributes are compatible\r\nfunction validateAttributes( attr1, attr2 ) {\r\n\r\n\tif ( ! attr1 && ! attr2 ) {\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tconst sameCount = attr1.count === attr2.count;\r\n\tconst sameNormalized = attr1.normalized === attr2.normalized;\r\n\tconst sameType = attr1.array.constructor === attr2.array.constructor;\r\n\tconst sameItemSize = attr1.itemSize === attr2.itemSize;\r\n\r\n\tif ( ! sameCount || ! sameNormalized || ! sameType || ! sameItemSize ) {\r\n\r\n\t\tthrow new Error();\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Clones the given attribute with a new compatible buffer attribute but no data\r\nfunction createAttributeClone( attr, countOverride = null ) {\r\n\r\n\tconst cons = attr.array.constructor;\r\n\tconst normalized = attr.normalized;\r\n\tconst itemSize = attr.itemSize;\r\n\tconst count = countOverride === null ? attr.count : countOverride;\r\n\r\n\treturn new BufferAttribute( new cons( itemSize * count ), itemSize, normalized );\r\n\r\n}\r\n\r\n// target offset is the number of elements in the target buffer stride to skip before copying the\r\n// attributes contents in to.\r\nfunction copyAttributeContents( attr, target, targetOffset = 0 ) {\r\n\r\n\tif ( attr.isInterleavedBufferAttribute ) {\r\n\r\n\t\tconst itemSize = attr.itemSize;\r\n\t\tfor ( let i = 0, l = attr.count; i < l; i ++ ) {\r\n\r\n\t\t\tconst io = i + targetOffset;\r\n\t\t\ttarget.setX( io, attr.getX( i ) );\r\n\t\t\tif ( itemSize >= 2 ) target.setY( io, attr.getY( i ) );\r\n\t\t\tif ( itemSize >= 3 ) target.setZ( io, attr.getZ( i ) );\r\n\t\t\tif ( itemSize >= 4 ) target.setW( io, attr.getW( i ) );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tconst array = target.array;\r\n\t\tconst cons = array.constructor;\r\n\t\tconst byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\r\n\t\tconst temp = new cons( array.buffer, byteOffset, attr.array.length );\r\n\t\ttemp.set( attr.array );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Adds the \"matrix\" multiplied by \"scale\" to \"target\"\r\nfunction addScaledMatrix( target, matrix, scale ) {\r\n\r\n\tconst targetArray = target.elements;\r\n\tconst matrixArray = matrix.elements;\r\n\tfor ( let i = 0, l = matrixArray.length; i < l; i ++ ) {\r\n\r\n\t\ttargetArray[ i ] += matrixArray[ i ] * scale;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// A version of \"SkinnedMesh.boneTransform\" for normals\r\nfunction boneNormalTransform( mesh, index, target ) {\r\n\r\n\tconst skeleton = mesh.skeleton;\r\n\tconst geometry = mesh.geometry;\r\n\tconst bones = skeleton.bones;\r\n\tconst boneInverses = skeleton.boneInverses;\r\n\r\n\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\r\n\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\r\n\r\n\t_matrix.elements.fill( 0 );\r\n\r\n\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\tconst weight = _skinWeight.getComponent( i );\r\n\r\n\t\tif ( weight !== 0 ) {\r\n\r\n\t\t\tconst boneIndex = _skinIndex.getComponent( i );\r\n\t\t\t_boneMatrix.multiplyMatrices( bones[ boneIndex ].matrixWorld, boneInverses[ boneIndex ] );\r\n\r\n\t\t\taddScaledMatrix( _matrix, _boneMatrix, weight );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_matrix.multiply( mesh.bindMatrix ).premultiply( mesh.bindMatrixInverse );\r\n\ttarget.transformDirection( _matrix );\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\n// Applies the morph target data to the target vector\r\nfunction applyMorphTarget( morphData, morphInfluences, morphTargetsRelative, i, target ) {\r\n\r\n\t_morphVector.set( 0, 0, 0 );\r\n\tfor ( let j = 0, jl = morphData.length; j < jl; j ++ ) {\r\n\r\n\t\tconst influence = morphInfluences[ j ];\r\n\t\tconst morphAttribute = morphData[ j ];\r\n\r\n\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t_temp.fromBufferAttribute( morphAttribute, i );\r\n\r\n\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t_morphVector.addScaledVector( _temp, influence );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_morphVector.addScaledVector( _temp.sub( target ), influence );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttarget.add( _morphVector );\r\n\r\n}\r\n\r\n// Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in plac\r\nfunction mergeBufferGeometries( geometries, options = { useGroups: false, updateIndex: false }, targetGeometry = new BufferGeometry() ) {\r\n\r\n\tconst isIndexed = geometries[ 0 ].index !== null;\r\n\tconst { useGroups, updateIndex } = options;\r\n\r\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\r\n\tconst attributes = {};\r\n\r\n\tlet offset = 0;\r\n\r\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\r\n\r\n\t\tconst geometry = geometries[ i ];\r\n\t\tlet attributesCount = 0;\r\n\r\n\t\t// ensure that all geometries are indexed, or none\r\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\r\n\r\n\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\r\n\r\n\t\t}\r\n\r\n\t\t// gather attributes, exit early if they're different\r\n\t\tfor ( const name in geometry.attributes ) {\r\n\r\n\t\t\tif ( ! attributesUsed.has( name ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attributes[ name ] === undefined ) {\r\n\r\n\t\t\t\tattributes[ name ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\r\n\t\t\tattributesCount ++;\r\n\r\n\t\t}\r\n\r\n\t\t// ensure geometries have the same number of attributes\r\n\t\tif ( attributesCount !== attributesUsed.size ) {\r\n\r\n\t\t\tthrow new Error( 'StaticGeometryGenerator: Make sure all geometries have the same number of attributes.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( useGroups ) {\r\n\r\n\t\t\tlet count;\r\n\t\t\tif ( isIndexed ) {\r\n\r\n\t\t\t\tcount = geometry.index.count;\r\n\r\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\r\n\r\n\t\t\t\tcount = geometry.attributes.position.count;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: The geometry must have either an index or a position attribute' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetGeometry.addGroup( offset, count, i );\r\n\t\t\toffset += count;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// merge indices\r\n\tif ( isIndexed ) {\r\n\r\n\t\tlet forceUpateIndex = false;\r\n\t\tif ( ! targetGeometry.index ) {\r\n\r\n\t\t\tlet indexCount = 0;\r\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\r\n\r\n\t\t\t\tindexCount += geometries[ i ].index.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetGeometry.setIndex( new BufferAttribute( new Uint32Array( indexCount ), 1, false ) );\r\n\t\t\tforceUpateIndex = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateIndex || forceUpateIndex ) {\r\n\r\n\t\t\tconst targetIndex = targetGeometry.index;\r\n\t\t\tlet targetOffset = 0;\r\n\t\t\tlet indexOffset = 0;\r\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\r\n\r\n\t\t\t\tconst geometry = geometries[ i ];\r\n\t\t\t\tconst index = geometry.index;\r\n\t\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\r\n\r\n\t\t\t\t\ttargetIndex.setX( targetOffset, index.getX( j ) + indexOffset );\r\n\t\t\t\t\ttargetOffset ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tindexOffset += geometry.attributes.position.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// merge attributes\r\n\tfor ( const name in attributes ) {\r\n\r\n\t\tconst attrList = attributes[ name ];\r\n\t\tif ( ! ( name in targetGeometry.attributes ) ) {\r\n\r\n\t\t\tlet count = 0;\r\n\t\t\tfor ( const key in attrList ) {\r\n\r\n\t\t\t\tcount += attrList[ key ].count;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetGeometry.setAttribute( name, createAttributeClone( attributes[ name ][ 0 ], count ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst targetAttribute = targetGeometry.attributes[ name ];\r\n\t\tlet offset = 0;\r\n\t\tfor ( const key in attrList ) {\r\n\r\n\t\t\tconst attr = attrList[ key ];\r\n\t\t\tcopyAttributeContents( attr, targetAttribute, offset );\r\n\t\t\toffset += attr.count;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn targetGeometry;\r\n\r\n}\r\n\r\nexport class StaticGeometryGenerator {\r\n\r\n\tconstructor( meshes ) {\r\n\r\n\t\tif ( ! Array.isArray( meshes ) ) {\r\n\r\n\t\t\tmeshes = [ meshes ];\r\n\r\n\t\t}\r\n\r\n\t\tconst finalMeshes = [];\r\n\t\tmeshes.forEach( object => {\r\n\r\n\t\t\tobject.traverse( c => {\r\n\r\n\t\t\t\tif ( c.isMesh ) {\r\n\r\n\t\t\t\t\tfinalMeshes.push( c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t\tthis.meshes = finalMeshes;\r\n\t\tthis.useGroups = true;\r\n\t\tthis.applyWorldTransforms = true;\r\n\t\tthis.attributes = [ 'position', 'normal', 'tangent', 'uv', 'uv2' ];\r\n\t\tthis._intermediateGeometry = new Array( finalMeshes.length ).fill().map( () => new BufferGeometry() );\r\n\r\n\t}\r\n\r\n\tgetMaterials() {\r\n\r\n\t\tconst materials = [];\r\n\t\tthis.meshes.forEach( mesh => {\r\n\r\n\t\t\tif ( Array.isArray( mesh.material ) ) {\r\n\r\n\t\t\t\tmaterials.push( ...mesh.material );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterials.push( mesh.material );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tgenerate( targetGeometry = new BufferGeometry() ) {\r\n\r\n\t\tconst { meshes, useGroups, _intermediateGeometry } = this;\r\n\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst mesh = meshes[ i ];\r\n\t\t\tconst geom = _intermediateGeometry[ i ];\r\n\t\t\tthis._convertToStaticGeometry( mesh, geom );\r\n\r\n\t\t}\r\n\r\n\t\tmergeBufferGeometries( _intermediateGeometry, { useGroups }, targetGeometry );\r\n\t\tfor ( const key in targetGeometry.attributes ) {\r\n\r\n\t\t\ttargetGeometry.attributes[ key ].needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn targetGeometry;\r\n\r\n\t}\r\n\r\n\t_convertToStaticGeometry( mesh, targetGeometry = new BufferGeometry() ) {\r\n\r\n\t\tconst geometry = mesh.geometry;\r\n\t\tconst applyWorldTransforms = this.applyWorldTransforms;\r\n\t\tconst includeNormal = this.attributes.includes( 'normal' );\r\n\t\tconst includeTangent = this.attributes.includes( 'tangent' );\r\n\t\tconst attributes = geometry.attributes;\r\n\t\tconst targetAttributes = targetGeometry.attributes;\r\n\r\n\t\t// initialize the attributes if they don't exist\r\n\t\tif ( ! targetGeometry.index ) {\r\n\r\n\t\t\ttargetGeometry.index = geometry.index;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! targetAttributes.position ) {\r\n\r\n\t\t\ttargetGeometry.setAttribute( 'position', createAttributeClone( attributes.position ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( includeNormal && ! targetAttributes.normal && attributes.normal ) {\r\n\r\n\t\t\ttargetGeometry.setAttribute( 'normal', createAttributeClone( attributes.normal ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( includeTangent && ! targetAttributes.tangent && attributes.tangent ) {\r\n\r\n\t\t\ttargetGeometry.setAttribute( 'tangent', createAttributeClone( attributes.tangent ) );\r\n\r\n\t\t}\r\n\r\n\t\t// ensure the attributes are consistent\r\n\t\tvalidateAttributes( geometry.index, targetGeometry.index );\r\n\t\tvalidateAttributes( attributes.position, targetAttributes.position );\r\n\r\n\t\tif ( includeNormal ) {\r\n\r\n\t\t\tvalidateAttributes( attributes.normal, targetAttributes.normal );\r\n\r\n\t\t}\r\n\r\n\t\tif ( includeTangent ) {\r\n\r\n\t\t\tvalidateAttributes( attributes.tangent, targetAttributes.tangent );\r\n\r\n\t\t}\r\n\r\n\t\t// generate transformed vertex attribute data\r\n\t\tconst position = attributes.position;\r\n\t\tconst normal = includeNormal ? attributes.normal : null;\r\n\t\tconst tangent = includeTangent ? attributes.tangent : null;\r\n\t\tconst morphPosition = geometry.morphAttributes.position;\r\n\t\tconst morphNormal = geometry.morphAttributes.normal;\r\n\t\tconst morphTangent = geometry.morphAttributes.tangent;\r\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\r\n\t\tconst morphInfluences = mesh.morphTargetInfluences;\r\n\t\tconst normalMatrix = new Matrix3();\r\n\t\tnormalMatrix.getNormalMatrix( mesh.matrixWorld );\r\n\r\n\t\tfor ( let i = 0, l = attributes.position.count; i < l; i ++ ) {\r\n\r\n\t\t\t_positionVector.fromBufferAttribute( position, i );\r\n\t\t\tif ( normal ) {\r\n\r\n\t\t\t\t_normalVector.fromBufferAttribute( normal, i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tangent ) {\r\n\r\n\t\t\t\t_tangentVector4.fromBufferAttribute( tangent, i );\r\n\t\t\t\t_tangentVector.fromBufferAttribute( tangent, i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// apply morph target transform\r\n\t\t\tif ( morphInfluences ) {\r\n\r\n\t\t\t\tif ( morphPosition ) {\r\n\r\n\t\t\t\t\tapplyMorphTarget( morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( morphNormal ) {\r\n\r\n\t\t\t\t\tapplyMorphTarget( morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( morphTangent ) {\r\n\r\n\t\t\t\t\tapplyMorphTarget( morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// apply bone transform\r\n\t\t\tif ( mesh.isSkinnedMesh ) {\r\n\r\n\t\t\t\tmesh.boneTransform( i, _positionVector );\r\n\t\t\t\tif ( normal ) {\r\n\r\n\t\t\t\t\tboneNormalTransform( mesh, i, _normalVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( tangent ) {\r\n\r\n\t\t\t\t\tboneNormalTransform( mesh, i, _tangentVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update the vectors of the attributes\r\n\t\t\tif ( applyWorldTransforms ) {\r\n\r\n\t\t\t\t_positionVector.applyMatrix4( mesh.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetAttributes.position.setXYZ( i, _positionVector.x, _positionVector.y, _positionVector.z );\r\n\r\n\t\t\tif ( normal ) {\r\n\r\n\t\t\t\tif ( applyWorldTransforms ) {\r\n\r\n\t\t\t\t\t_normalVector.applyNormalMatrix( normalMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetAttributes.normal.setXYZ( i, _normalVector.x, _normalVector.y, _normalVector.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tangent ) {\r\n\r\n\t\t\t\tif ( applyWorldTransforms ) {\r\n\r\n\t\t\t\t\t_tangentVector.transformDirection( mesh.matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetAttributes.tangent.setXYZW( i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// copy other attributes over\r\n\t\tfor ( const i in this.attributes ) {\r\n\r\n\t\t\tconst key = this.attributes[ i ];\r\n\t\t\tif ( key === 'position' || key === 'tangent' || key === 'normal' || ! ( key in attributes ) ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! targetAttributes[ key ] ) {\r\n\r\n\t\t\t\ttargetGeometry.setAttribute( key, createAttributeClone( attributes[ key ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvalidateAttributes( attributes[ key ], targetAttributes[ key ] );\r\n\t\t\tcopyAttributeContents( attributes[ key ], targetAttributes[ key ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn targetGeometry;\r\n\r\n\t}\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}