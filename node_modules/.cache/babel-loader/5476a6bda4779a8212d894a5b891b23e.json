{"ast":null,"code":"import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nconst DIST_EPSILON = 1e-15;\nfunction isNearZero(value) {\n  return Math.abs(value) < DIST_EPSILON;\n}\nexport class ExtendedTriangle extends Triangle {\n  constructor() {\n    super(...arguments);\n    this.isExtendedTriangle = true;\n    this.satAxes = new Array(4).fill().map(() => new Vector3());\n    this.satBounds = new Array(4).fill().map(() => new SeparatingAxisBounds());\n    this.points = [this.a, this.b, this.c];\n    this.sphere = new Sphere();\n    this.plane = new Plane();\n    this.needsUpdate = true;\n  }\n  intersectsSphere(sphere) {\n    return sphereIntersectTriangle(sphere, this);\n  }\n  update() {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const points = this.points;\n    const satAxes = this.satAxes;\n    const satBounds = this.satBounds;\n    const axis0 = satAxes[0];\n    const sab0 = satBounds[0];\n    this.getNormal(axis0);\n    sab0.setFromPoints(axis0, points);\n    const axis1 = satAxes[1];\n    const sab1 = satBounds[1];\n    axis1.subVectors(a, b);\n    sab1.setFromPoints(axis1, points);\n    const axis2 = satAxes[2];\n    const sab2 = satBounds[2];\n    axis2.subVectors(b, c);\n    sab2.setFromPoints(axis2, points);\n    const axis3 = satAxes[3];\n    const sab3 = satBounds[3];\n    axis3.subVectors(c, a);\n    sab3.setFromPoints(axis3, points);\n    this.sphere.setFromPoints(this.points);\n    this.plane.setFromNormalAndCoplanarPoint(axis0, a);\n    this.needsUpdate = false;\n  }\n}\nExtendedTriangle.prototype.closestPointToSegment = function () {\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const edge = new Line3();\n  return function distanceToSegment(segment) {\n    let target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const {\n      start,\n      end\n    } = segment;\n    const points = this.points;\n    let distSq;\n    let closestDistanceSq = Infinity;\n\n    // check the triangle edges\n    for (let i = 0; i < 3; i++) {\n      const nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    }\n\n    // check end points\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\nExtendedTriangle.prototype.intersectsTriangle = function () {\n  const saTri2 = new ExtendedTriangle();\n  const arr1 = new Array(3);\n  const arr2 = new Array(3);\n  const cachedSatBounds = new SeparatingAxisBounds();\n  const cachedSatBounds2 = new SeparatingAxisBounds();\n  const cachedAxis = new Vector3();\n  const dir1 = new Vector3();\n  const dir2 = new Vector3();\n  const tempDir = new Vector3();\n  const edge = new Line3();\n  const edge1 = new Line3();\n  const edge2 = new Line3();\n\n  // TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n  // be a line contained by both triangles if not a different special case somehow represented in the return result.\n  return function intersectsTriangle(other) {\n    let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (!other.isExtendedTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n    const plane1 = this.plane;\n    const plane2 = other.plane;\n    if (Math.abs(plane1.normal.dot(plane2.normal)) > 1.0 - 1e-10) {\n      // perform separating axis intersection test only for coplanar triangles\n      const satBounds1 = this.satBounds;\n      const satAxes1 = this.satAxes;\n      arr2[0] = other.a;\n      arr2[1] = other.b;\n      arr2[2] = other.c;\n      for (let i = 0; i < 4; i++) {\n        const sb = satBounds1[i];\n        const sa = satAxes1[i];\n        cachedSatBounds.setFromPoints(sa, arr2);\n        if (sb.isSeparated(cachedSatBounds)) return false;\n      }\n      const satBounds2 = other.satBounds;\n      const satAxes2 = other.satAxes;\n      arr1[0] = this.a;\n      arr1[1] = this.b;\n      arr1[2] = this.c;\n      for (let i = 0; i < 4; i++) {\n        const sb = satBounds2[i];\n        const sa = satAxes2[i];\n        cachedSatBounds.setFromPoints(sa, arr1);\n        if (sb.isSeparated(cachedSatBounds)) return false;\n      }\n\n      // check crossed axes\n      for (let i = 0; i < 4; i++) {\n        const sa1 = satAxes1[i];\n        for (let i2 = 0; i2 < 4; i2++) {\n          const sa2 = satAxes2[i2];\n          cachedAxis.crossVectors(sa1, sa2);\n          cachedSatBounds.setFromPoints(cachedAxis, arr1);\n          cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n          if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n        }\n      }\n      if (target) {\n        // TODO find two points that intersect on the edges and make that the result\n        console.warn('ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.');\n        target.start.set(0, 0, 0);\n        target.end.set(0, 0, 0);\n      }\n      return true;\n    } else {\n      // find the edge that intersects the other triangle plane\n      const points1 = this.points;\n      let found1 = false;\n      let count1 = 0;\n      for (let i = 0; i < 3; i++) {\n        const p = points1[i];\n        const pNext = points1[(i + 1) % 3];\n        edge.start.copy(p);\n        edge.end.copy(pNext);\n        edge.delta(dir1);\n        const targetPoint = found1 ? edge1.start : edge1.end;\n        const startIntersects = isNearZero(plane2.distanceToPoint(p));\n        if (isNearZero(plane2.normal.dot(dir1)) && startIntersects) {\n          // if the edge lies on the plane then take the line\n          edge1.copy(edge);\n          count1 = 2;\n          break;\n        }\n\n        // check if the start point is near the plane because \"intersectLine\" is not robust to that case\n        const doesIntersect = plane2.intersectLine(edge, targetPoint) || startIntersects;\n        if (doesIntersect && !isNearZero(targetPoint.distanceTo(pNext))) {\n          count1++;\n          if (found1) {\n            break;\n          }\n          found1 = true;\n        }\n      }\n      if (count1 === 1 && this.containsPoint(edge1.end)) {\n        if (target) {\n          target.start.copy(edge1.end);\n          target.end.copy(edge1.end);\n        }\n        return true;\n      } else if (count1 !== 2) {\n        return false;\n      }\n\n      // find the other triangles edge that intersects this plane\n      const points2 = other.points;\n      let found2 = false;\n      let count2 = 0;\n      for (let i = 0; i < 3; i++) {\n        const p = points2[i];\n        const pNext = points2[(i + 1) % 3];\n        edge.start.copy(p);\n        edge.end.copy(pNext);\n        edge.delta(dir2);\n        const targetPoint = found2 ? edge2.start : edge2.end;\n        const startIntersects = isNearZero(plane1.distanceToPoint(p));\n        if (isNearZero(plane1.normal.dot(dir2)) && startIntersects) {\n          // if the edge lies on the plane then take the line\n          edge2.copy(edge);\n          count2 = 2;\n          break;\n        }\n\n        // check if the start point is near the plane because \"intersectLine\" is not robust to that case\n        const doesIntersect = plane1.intersectLine(edge, targetPoint) || startIntersects;\n        if (doesIntersect && !isNearZero(targetPoint.distanceTo(pNext))) {\n          count2++;\n          if (found2) {\n            break;\n          }\n          found2 = true;\n        }\n      }\n      if (count2 === 1 && this.containsPoint(edge2.end)) {\n        if (target) {\n          target.start.copy(edge2.end);\n          target.end.copy(edge2.end);\n        }\n        return true;\n      } else if (count2 !== 2) {\n        return false;\n      }\n\n      // find swap the second edge so both lines are running the same direction\n      edge1.delta(dir1);\n      edge2.delta(dir2);\n      if (dir1.dot(dir2) < 0) {\n        let tmp = edge2.start;\n        edge2.start = edge2.end;\n        edge2.end = tmp;\n      }\n\n      // check if the edges are overlapping\n      const s1 = edge1.start.dot(dir1);\n      const e1 = edge1.end.dot(dir1);\n      const s2 = edge2.start.dot(dir1);\n      const e2 = edge2.end.dot(dir1);\n      const separated1 = e1 < s2;\n      const separated2 = s1 < e2;\n      if (s1 !== e2 && s2 !== e1 && separated1 === separated2) {\n        return false;\n      }\n\n      // assign the target output\n      if (target) {\n        tempDir.subVectors(edge1.start, edge2.start);\n        if (tempDir.dot(dir1) > 0) {\n          target.start.copy(edge1.start);\n        } else {\n          target.start.copy(edge2.start);\n        }\n        tempDir.subVectors(edge1.end, edge2.end);\n        if (tempDir.dot(dir1) < 0) {\n          target.end.copy(edge1.end);\n        } else {\n          target.end.copy(edge2.end);\n        }\n      }\n      return true;\n    }\n  };\n}();\nExtendedTriangle.prototype.distanceToPoint = function () {\n  const target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\nExtendedTriangle.prototype.distanceToTriangle = function () {\n  const point = new Vector3();\n  const point2 = new Vector3();\n  const cornerFields = ['a', 'b', 'c'];\n  const line1 = new Line3();\n  const line2 = new Line3();\n  return function distanceToTriangle(other) {\n    let target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const lineTarget = target1 || target2 ? line1 : null;\n    if (this.intersectsTriangle(other, lineTarget)) {\n      if (target1 || target2) {\n        if (target1) lineTarget.getCenter(target1);\n        if (target2) lineTarget.getCenter(target2);\n      }\n      return 0;\n    }\n    let closestDistanceSq = Infinity;\n\n    // check all point distances\n    for (let i = 0; i < 3; i++) {\n      let dist;\n      const field = cornerFields[i];\n      const otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n      const thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      const f11 = cornerFields[i];\n      const f12 = cornerFields[(i + 1) % 3];\n      line1.set(this[f11], this[f12]);\n      for (let i2 = 0; i2 < 3; i2++) {\n        const f21 = cornerFields[i2];\n        const f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n        const dist = point.distanceToSquared(point2);\n        if (dist < closestDistanceSq) {\n          closestDistanceSq = dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Triangle","Vector3","Line3","Sphere","Plane","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","DIST_EPSILON","isNearZero","value","Math","abs","ExtendedTriangle","constructor","arguments","isExtendedTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","plane","needsUpdate","intersectsSphere","update","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","setFromNormalAndCoplanarPoint","prototype","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","length","undefined","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","dir1","dir2","tempDir","edge1","edge2","other","target","plane1","plane2","normal","dot","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","console","warn","set","points1","found1","count1","p","pNext","delta","targetPoint","startIntersects","distanceToPoint","doesIntersect","intersectLine","distanceTo","containsPoint","points2","found2","count2","tmp","s1","e1","s2","e2","separated1","separated2","point","distanceToTriangle","cornerFields","line1","line2","lineTarget","getCenter","dist","field","otherVec","thisVec","f11","f12","f21","f22"],"sources":["C:/Users/lifes/OneDrive/Desktop/Projects/3D Apple Landing Page/Apple-iphone-3d-landing-page-starter-Code/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js"],"sourcesContent":["import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\r\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\r\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\r\n\r\nconst DIST_EPSILON = 1e-15;\r\nfunction isNearZero( value ) {\r\n\r\n\treturn Math.abs( value ) < DIST_EPSILON;\r\n\r\n}\r\n\r\nexport class ExtendedTriangle extends Triangle {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.isExtendedTriangle = true;\r\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\r\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\r\n\t\tthis.points = [ this.a, this.b, this.c ];\r\n\t\tthis.sphere = new Sphere();\r\n\t\tthis.plane = new Plane();\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphereIntersectTriangle( sphere, this );\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst a = this.a;\r\n\t\tconst b = this.b;\r\n\t\tconst c = this.c;\r\n\t\tconst points = this.points;\r\n\r\n\t\tconst satAxes = this.satAxes;\r\n\t\tconst satBounds = this.satBounds;\r\n\r\n\t\tconst axis0 = satAxes[ 0 ];\r\n\t\tconst sab0 = satBounds[ 0 ];\r\n\t\tthis.getNormal( axis0 );\r\n\t\tsab0.setFromPoints( axis0, points );\r\n\r\n\t\tconst axis1 = satAxes[ 1 ];\r\n\t\tconst sab1 = satBounds[ 1 ];\r\n\t\taxis1.subVectors( a, b );\r\n\t\tsab1.setFromPoints( axis1, points );\r\n\r\n\t\tconst axis2 = satAxes[ 2 ];\r\n\t\tconst sab2 = satBounds[ 2 ];\r\n\t\taxis2.subVectors( b, c );\r\n\t\tsab2.setFromPoints( axis2, points );\r\n\r\n\t\tconst axis3 = satAxes[ 3 ];\r\n\t\tconst sab3 = satBounds[ 3 ];\r\n\t\taxis3.subVectors( c, a );\r\n\t\tsab3.setFromPoints( axis3, points );\r\n\r\n\t\tthis.sphere.setFromPoints( this.points );\r\n\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\nExtendedTriangle.prototype.closestPointToSegment = ( function () {\r\n\r\n\tconst point1 = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst edge = new Line3();\r\n\r\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\r\n\r\n\t\tconst { start, end } = segment;\r\n\t\tconst points = this.points;\r\n\t\tlet distSq;\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check the triangle edges\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst nexti = ( i + 1 ) % 3;\r\n\t\t\tedge.start.copy( points[ i ] );\r\n\t\t\tedge.end.copy( points[ nexti ] );\r\n\r\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\r\n\r\n\t\t\tdistSq = point1.distanceToSquared( point2 );\r\n\t\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = distSq;\r\n\t\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check end points\r\n\t\tthis.closestPointToPoint( start, point1 );\r\n\t\tdistSq = start.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( start );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closestPointToPoint( end, point1 );\r\n\t\tdistSq = end.distanceToSquared( point1 );\r\n\t\tif ( distSq < closestDistanceSq ) {\r\n\r\n\t\t\tclosestDistanceSq = distSq;\r\n\t\t\tif ( target1 ) target1.copy( point1 );\r\n\t\t\tif ( target2 ) target2.copy( end );\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nExtendedTriangle.prototype.intersectsTriangle = ( function () {\r\n\r\n\tconst saTri2 = new ExtendedTriangle();\r\n\tconst arr1 = new Array( 3 );\r\n\tconst arr2 = new Array( 3 );\r\n\tconst cachedSatBounds = new SeparatingAxisBounds();\r\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\r\n\tconst cachedAxis = new Vector3();\r\n\tconst dir1 = new Vector3();\r\n\tconst dir2 = new Vector3();\r\n\tconst tempDir = new Vector3();\r\n\tconst edge = new Line3();\r\n\tconst edge1 = new Line3();\r\n\tconst edge2 = new Line3();\r\n\r\n\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\r\n\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\r\n\treturn function intersectsTriangle( other, target = null ) {\r\n\r\n\t\tif ( this.needsUpdate ) {\r\n\r\n\t\t\tthis.update();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! other.isExtendedTriangle ) {\r\n\r\n\t\t\tsaTri2.copy( other );\r\n\t\t\tsaTri2.update();\r\n\t\t\tother = saTri2;\r\n\r\n\t\t} else if ( other.needsUpdate ) {\r\n\r\n\t\t\tother.update();\r\n\r\n\t\t}\r\n\r\n\t\tconst plane1 = this.plane;\r\n\t\tconst plane2 = other.plane;\r\n\r\n\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\r\n\r\n\t\t\t// perform separating axis intersection test only for coplanar triangles\r\n\t\t\tconst satBounds1 = this.satBounds;\r\n\t\t\tconst satAxes1 = this.satAxes;\r\n\t\t\tarr2[ 0 ] = other.a;\r\n\t\t\tarr2[ 1 ] = other.b;\r\n\t\t\tarr2[ 2 ] = other.c;\r\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\r\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst satBounds2 = other.satBounds;\r\n\t\t\tconst satAxes2 = other.satAxes;\r\n\t\t\tarr1[ 0 ] = this.a;\r\n\t\t\tarr1[ 1 ] = this.b;\r\n\t\t\tarr1[ 2 ] = this.c;\r\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\r\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// check crossed axes\r\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\tconst sa1 = satAxes1[ i ];\r\n\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\r\n\r\n\t\t\t\t\tconst sa2 = satAxes2[ i2 ];\r\n\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\r\n\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\r\n\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\r\n\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( target ) {\r\n\r\n\t\t\t\t// TODO find two points that intersect on the edges and make that the result\r\n\t\t\t\tconsole.warn( 'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\r\n\r\n\t\t\t\ttarget.start.set( 0, 0, 0 );\r\n\t\t\t\ttarget.end.set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// find the edge that intersects the other triangle plane\r\n\t\t\tconst points1 = this.points;\r\n\t\t\tlet found1 = false;\r\n\t\t\tlet count1 = 0;\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tconst p = points1[ i ];\r\n\t\t\t\tconst pNext = points1[ ( i + 1 ) % 3 ];\r\n\r\n\t\t\t\tedge.start.copy( p );\r\n\t\t\t\tedge.end.copy( pNext );\r\n\t\t\t\tedge.delta( dir1 );\r\n\r\n\t\t\t\tconst targetPoint = found1 ? edge1.start : edge1.end;\r\n\t\t\t\tconst startIntersects = isNearZero( plane2.distanceToPoint( p ) );\r\n\t\t\t\tif ( isNearZero( plane2.normal.dot( dir1 ) ) && startIntersects ) {\r\n\r\n\t\t\t\t\t// if the edge lies on the plane then take the line\r\n\t\t\t\t\tedge1.copy( edge );\r\n\t\t\t\t\tcount1 = 2;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\r\n\t\t\t\tconst doesIntersect = plane2.intersectLine( edge, targetPoint ) || startIntersects;\r\n\t\t\t\tif ( doesIntersect && ! isNearZero( targetPoint.distanceTo( pNext ) ) ) {\r\n\r\n\t\t\t\t\tcount1 ++;\r\n\t\t\t\t\tif ( found1 ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfound1 = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( count1 === 1 && this.containsPoint( edge1.end ) ) {\r\n\r\n\t\t\t\tif ( target ) {\r\n\r\n\t\t\t\t\ttarget.start.copy( edge1.end );\r\n\t\t\t\t\ttarget.end.copy( edge1.end );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t} else if ( count1 !== 2 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// find the other triangles edge that intersects this plane\r\n\t\t\tconst points2 = other.points;\r\n\t\t\tlet found2 = false;\r\n\t\t\tlet count2 = 0;\r\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\tconst p = points2[ i ];\r\n\t\t\t\tconst pNext = points2[ ( i + 1 ) % 3 ];\r\n\r\n\t\t\t\tedge.start.copy( p );\r\n\t\t\t\tedge.end.copy( pNext );\r\n\t\t\t\tedge.delta( dir2 );\r\n\r\n\t\t\t\tconst targetPoint = found2 ? edge2.start : edge2.end;\r\n\t\t\t\tconst startIntersects = isNearZero( plane1.distanceToPoint( p ) );\r\n\t\t\t\tif ( isNearZero( plane1.normal.dot( dir2 ) ) && startIntersects ) {\r\n\r\n\t\t\t\t\t// if the edge lies on the plane then take the line\r\n\t\t\t\t\tedge2.copy( edge );\r\n\t\t\t\t\tcount2 = 2;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\r\n\t\t\t\tconst doesIntersect = plane1.intersectLine( edge, targetPoint ) || startIntersects;\r\n\t\t\t\tif ( doesIntersect && ! isNearZero( targetPoint.distanceTo( pNext ) ) ) {\r\n\r\n\t\t\t\t\tcount2 ++;\r\n\t\t\t\t\tif ( found2 ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfound2 = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( count2 === 1 && this.containsPoint( edge2.end ) ) {\r\n\r\n\t\t\t\tif ( target ) {\r\n\r\n\t\t\t\t\ttarget.start.copy( edge2.end );\r\n\t\t\t\t\ttarget.end.copy( edge2.end );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t} else if ( count2 !== 2 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// find swap the second edge so both lines are running the same direction\r\n\t\t\tedge1.delta( dir1 );\r\n\t\t\tedge2.delta( dir2 );\r\n\r\n\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\r\n\r\n\t\t\t\tlet tmp = edge2.start;\r\n\t\t\t\tedge2.start = edge2.end;\r\n\t\t\t\tedge2.end = tmp;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// check if the edges are overlapping\r\n\t\t\tconst s1 = edge1.start.dot( dir1 );\r\n\t\t\tconst e1 = edge1.end.dot( dir1 );\r\n\t\t\tconst s2 = edge2.start.dot( dir1 );\r\n\t\t\tconst e2 = edge2.end.dot( dir1 );\r\n\t\t\tconst separated1 = e1 < s2;\r\n\t\t\tconst separated2 = s1 < e2;\r\n\r\n\t\t\tif ( s1 !== e2 && s2 !== e1 && separated1 === separated2 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// assign the target output\r\n\t\t\tif ( target ) {\r\n\r\n\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\r\n\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\r\n\r\n\t\t\t\t\ttarget.start.copy( edge1.start );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttarget.start.copy( edge2.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\r\n\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\r\n\r\n\t\t\t\t\ttarget.end.copy( edge1.end );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttarget.end.copy( edge2.end );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nExtendedTriangle.prototype.distanceToPoint = ( function () {\r\n\r\n\tconst target = new Vector3();\r\n\treturn function distanceToPoint( point ) {\r\n\r\n\t\tthis.closestPointToPoint( point, target );\r\n\t\treturn point.distanceTo( target );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n\r\nExtendedTriangle.prototype.distanceToTriangle = ( function () {\r\n\r\n\tconst point = new Vector3();\r\n\tconst point2 = new Vector3();\r\n\tconst cornerFields = [ 'a', 'b', 'c' ];\r\n\tconst line1 = new Line3();\r\n\tconst line2 = new Line3();\r\n\r\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\r\n\r\n\t\tconst lineTarget = target1 || target2 ? line1 : null;\r\n\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\r\n\r\n\t\t\tif ( target1 || target2 ) {\r\n\r\n\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\r\n\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\tlet closestDistanceSq = Infinity;\r\n\r\n\t\t// check all point distances\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tlet dist;\r\n\t\t\tconst field = cornerFields[ i ];\r\n\t\t\tconst otherVec = other[ field ];\r\n\t\t\tthis.closestPointToPoint( otherVec, point );\r\n\r\n\t\t\tdist = otherVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tconst thisVec = this[ field ];\r\n\t\t\tother.closestPointToPoint( thisVec, point );\r\n\r\n\t\t\tdist = thisVec.distanceToSquared( point );\r\n\r\n\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\r\n\t\t\t\tif ( target2 ) target2.copy( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst f11 = cornerFields[ i ];\r\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\r\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\r\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\r\n\r\n\t\t\t\tconst f21 = cornerFields[ i2 ];\r\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\r\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\r\n\r\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\r\n\r\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\r\n\t\t\t\tif ( dist < closestDistanceSq ) {\r\n\r\n\t\t\t\t\tclosestDistanceSq = dist;\r\n\t\t\t\t\tif ( target1 ) target1.copy( point );\r\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Math.sqrt( closestDistanceSq );\r\n\r\n\t};\r\n\r\n} )();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}