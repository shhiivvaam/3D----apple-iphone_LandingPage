{"ast":null,"code":"import { Object3D, SphereGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers.js';\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n  }\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n    this.envMap = envMap;\n    this.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n  controllerModel.add(scene);\n}\nclass XRControllerModelFactory {\n  constructor() {\n    let gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(_ref => {\n        let {\n          profile,\n          assetPath\n        } = _ref;\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl];\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            this._assetCache[controllerModel.motionController.assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    });\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null;\n      controllerModel.remove(scene);\n      scene = null;\n    });\n    return controllerModel;\n  }\n}\nexport { XRControllerModelFactory };","map":{"version":3,"names":["Object3D","SphereGeometry","MeshBasicMaterial","Mesh","GLTFLoader","fetchProfile","MotionController","MotionControllerConstants","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","XRControllerModel","constructor","motionController","envMap","setEnvironmentMap","traverse","child","isMesh","material","needsUpdate","updateMatrixWorld","force","updateFromGamepad","Object","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","value","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","arguments","length","undefined","path","_assetCache","createControllerModel","controller","addEventListener","event","xrInputSource","data","targetRayMode","gamepad","then","_ref","profile","assetPath","cachedAsset","assetUrl","clone","Error","setPath","load","asset","catch","err","remove"],"sources":["C:/Users/lifes/OneDrive/Desktop/Projects/3D Apple Landing Page/Apple-iphone-3d-landing-page-starter-Code/node_modules/three-stdlib/webxr/XRControllerModelFactory.js"],"sourcesContent":["import { Object3D, SphereGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    this.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            this._assetCache[controllerModel.motionController.assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    });\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null;\n      controllerModel.remove(scene);\n      scene = null;\n    });\n    return controllerModel;\n  }\n\n}\n\nexport { XRControllerModelFactory };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}